// This file is auto-generated by @hey-api/openapi-ts

export type Body_authentication_login = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Item creation schema.
 */
export type ItemCreate = {
    title: string;
    description?: (string | null);
};

/**
 * Public item schema (for API responses).
 */
export type ItemPublic = {
    created_at: string;
    updated_at?: (string | null);
    id: string;
    title: string;
    description?: (string | null);
    owner_id: string;
};

/**
 * Paginated items response.
 */
export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
    total?: (number | null);
    page?: (number | null);
    size?: (number | null);
};

/**
 * Item update schema.
 */
export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

/**
 * Generic message response.
 */
export type MessageResponse = {
    message: string;
};

/**
 * Password reset request schema.
 */
export type PasswordResetRequest = {
    email: string;
};

/**
 * Token response schema.
 */
export type TokenResponse = {
    access_token: string;
    token_type?: string;
};

/**
 * Password update schema.
 */
export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

/**
 * User creation schema.
 */
export type UserCreate = {
    email: string;
    full_name?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    password: string;
};

/**
 * Public user schema (for API responses).
 */
export type UserPublic = {
    created_at: string;
    updated_at?: (string | null);
    id: string;
    email: string;
    full_name?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
};

/**
 * User registration schema.
 */
export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

/**
 * Paginated users response.
 */
export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
    total?: (number | null);
    page?: (number | null);
    size?: (number | null);
};

/**
 * User update schema.
 */
export type UserUpdate = {
    email?: (string | null);
    full_name?: (string | null);
    password?: (string | null);
    is_active?: (boolean | null);
    is_superuser?: (boolean | null);
};

/**
 * User self-update schema.
 */
export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AuthenticationLoginData = {
    formData: Body_authentication_login;
};

export type AuthenticationLoginResponse = (TokenResponse);

export type AuthenticationRecoverPasswordData = {
    requestBody: PasswordResetRequest;
};

export type AuthenticationRecoverPasswordResponse = (MessageResponse);

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (MessageResponse);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (MessageResponse);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (MessageResponse);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (MessageResponse);

export type UtilsHealthCheckResponse = (boolean);

export type UtilsTestEmailResponse = (MessageResponse);